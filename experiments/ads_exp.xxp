workflow FireDetectionWorkflow {

    task DetectAlert {
        implementation "DetectAlert";
    }

    task SelectUsers {
        implementation "SelectUsers";
    }

    task UserResponse {
        implementation "UserResponse";
    }

    START -> DetectAlert -> SelectUsers -> UserResponse -> END;

    define input data ModelFile;
    define input data UsersInfo;

    configure data ModelFile {
        path "DetectAlert/**";
    }

    configure data UsersInfo {
        path "SelectUsers/**";
    }

    ModelFile --> DetectAlert.ModelFile;
    UsersInfo --> SelectUsers.UsersInfo;
}

workflow FireDetectionWorkflow1 from FireDetectionWorkflow {

}

experiment Exp1 {
    intent testComplexControl;

    control {
        START -> S1 -> END;
    }

    space S1 of FireDetectionWorkflow1 {
        //strategy gridsearch;
        strategy randomsearch;
        runs = 1;

        // SelectUsers
        param_values num_users_selection_values = range(3,10);
        param_values selection_diameter_km_values = range(20,40);
        param_values user_profile_selection_values = enum("driving","walking","cycling");
        param_values filter_only_available_values = enum("true","false");
        param_values sort_by_values = enum("distance","travel_time");
        param_values osrm_timeout_s_values = range(1,10);
        param_values euclidian_filter_km_values = range(1,50);

        // UserResponse
        param_values accept_string_values       = enum("accept","yes","ok");
        param_values reject_string_values       = enum("reject","no","cancel");
        param_values case_sensitive_values      = enum("true","false");
        param_values default_response_values    = enum("accept","reject","none");

        task SelectUsers {
            param num_users_selection      = num_users_selection_values;
            param selection_diameter_km    = selection_diameter_km_values;
            param user_profile_selection = user_profile_selection_values;
            param filter_only_available    = filter_only_available_values;
            param sort_by                  = sort_by_values;
            param osrm_timeout_s           = osrm_timeout_s_values;
            param euclidian_filter_km      = euclidian_filter_km_values;
        }

        task UserResponse {
            param accept_string    = accept_string_values;
            param reject_string    = reject_string_values;
            param case_sensitive   = case_sensitive_values;
            param default_response = default_response_values;
        }

    }
}